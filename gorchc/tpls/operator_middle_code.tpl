// Package main 生成算子代码得中间代码
// Code generated by "gorch"; DO NOT EDIT.
package main


import (
	"log"
	"os"
	"path/filepath"
	"strings"
	"bytes"
	"html/template"
	{{- range $pkg, $operators := .Pkgs}}
	{{$operators.PkgAlias}} "{{$pkg}}"
	{{- end}}
	"github.com/gogorch/gorch"
	"github.com/gogorch/gorch/gorchc/tpls"
)

func main() {
	t, err := template.New("operator_code").Funcs(template.FuncMap{
		"trim": strings.TrimSpace,
	}).Parse(tpls.OperatorTpl)
	if err != nil {
		log.Fatalf("remove tmp dir failed, error: %s", err)
	}
	buf := bytes.NewBuffer(nil)
	err = t.Execute(buf, map[string]any{
		"Pkgs": obj,
		"Package": "gen_operators",
	})
	if err != nil {
		log.Fatalf("generate operator code failed, error: %s", err)
	}
	f := filepath.Join("{{.ToDir}}", "gen_operators.go")
	_ = os.Remove(f)
	err = os.WriteFile(f, buf.Bytes(), 0644)
	if err != nil {
		log.Fatalf("write gen_operator file failed, error: %s", err)
	}
	log.Print("generate code success")
}

var obj = map[string]tpls.PkgOperators{
	{{- range $pkg, $operators := .Pkgs}}
	"{{$pkg}}": tpls.PkgOperators{
		PkgAlias: "{{$operators.PkgAlias}}",
		Operators: map[int]tpls.PkgOperator{
			{{- range $idx, $opvals := $operators.Operators}}
			{{index $opvals 2}}: tpls.PkgOperator{
				PkgAlias: "{{$operators.PkgAlias}}",
				Name:     "{{index $opvals 1}}",
				Struct:   "{{index $opvals 0}}",
				Seq:      "{{index $opvals 2}}",
				RType:    gorch.AnalyzeOperator[{{$operators.PkgAlias}}.{{index $opvals 0}}](),
			},
			{{- end}}
		},
	},
	{{- end}}
}
