// Package gen_operators 生成的算子代码
// 本文件不应该保存在你的代码库中，而是应该在线上编译前产出
// Code generated by "gorchc"; DO NOT EDIT.
package gen_operators

import (
    "fmt"
	package00 "github.com/gogorch/gorch/gorchc/opa"
	package02 "github.com/gogorch/gorch/gorchc/opb"
    "github.com/gogorch/gorch"
)
var _ = fmt.Printf
type a0OperatorA0 package00.OperatorA0
func(o *a0OperatorA0) Execute(ctx *gorch.Context) (err error) {
    if er0 := ctx.MutableIns(&o.Name); er0 != nil {
        return fmt.Errorf("inject github.com/gogorch/gorch/gorchc/opa.OperatorA0.Name error: %v", er0)
    }
    _ = ctx.MutableIns(&o.Age)
    defer func() {
        if er0 := ctx.RegisterIns(&o.Age, true); er0 != nil {
            err = fmt.Errorf("extract github.com/gogorch/gorch/gorchc/opa.OperatorA0.Age error: %v", er0)
            return
        }
        o.Age = nil
        o.Name = nil
    }()
    return (*package00.OperatorA0)(o).Execute(ctx)
}
func(o *a0OperatorA0) IsGenerateOperatorCode() {}
type a1OperatorA1 package00.OperatorA1
func(o *a1OperatorA1) Execute(ctx *gorch.Context) (err error) {
    _ = ctx.MutableIns(&o.Name)
    _ = ctx.MutableIns(&o.Age)
    defer func() {
        if er0 := ctx.RegisterIns(&o.Age, true); er0 != nil {
            err = fmt.Errorf("extract github.com/gogorch/gorch/gorchc/opa.OperatorA1.Age error: %v", er0)
            return
        }
        o.Age = nil
        o.Name = nil
    }()
    return (*package00.OperatorA1)(o).Execute(ctx)
}
func(o *a1OperatorA1) IsGenerateOperatorCode() {}
type b0OperatorB0 package02.OperatorB0
func(o *b0OperatorB0) Execute(ctx *gorch.Context) (err error) {return (*package02.OperatorB0)(o).Execute(ctx)}
func(o *b0OperatorB0) IsGenerateOperatorCode() {}
type b1OperatorB1 package02.OperatorB1
func(o *b1OperatorB1) Execute(ctx *gorch.Context) (err error) {
    defer func() {
        if er0 := ctx.RegisterIns(&o.Age, true); er0 != nil {
            err = fmt.Errorf("extract github.com/gogorch/gorch/gorchc/opb.OperatorB1.Age error: %v", er0)
            return
        }
        o.Age = nil
    }()
    return (*package02.OperatorB1)(o).Execute(ctx)
}
func(o *b1OperatorB1) Prepare() error {return (*package02.OperatorB1)(o).Prepare()}
func(o *b1OperatorB1) IsGenerateOperatorCode() {}

func init() {
	must(
        gorch.RegOp[a0OperatorA0]("a0", 1),
        gorch.RegOp[a1OperatorA1]("a1", 2),
        gorch.RegOp[b0OperatorB0]("b0", 10),
        gorch.RegOp[b1OperatorB1]("b1", 11),
    )
}

func must(errs ...error) {
    hasErr := false
 	for _, e := range errs {
 		if e != nil {
            hasErr = true
 			fmt.Println(e)
 		}
 	}
    if hasErr {
        panic("register operator has error")
    }
}